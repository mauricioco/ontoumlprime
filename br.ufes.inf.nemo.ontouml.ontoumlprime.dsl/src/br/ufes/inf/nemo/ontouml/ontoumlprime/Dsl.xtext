// automatically generated by Xtext
grammar br.ufes.inf.nemo.ontouml.ontoumlprime.Dsl with org.eclipse.xtext.common.Terminals

import "http://nemo.inf.ufes.br/ontouml/ontoumlprime"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/*
 * Characterization
 * Derivation
 * Mediation
 */

Model returns Model:
	{Model}
	elements += PackageableElement*
;

PackageableElement returns PackageableElement:
	 Package
	| GeneralizationSet
	| PrimitiveDataType
	| ComplexDataType
	| Enumeration
	| MeronymicRelation
	| Kind
	| QuantityUniversal
	| CollectiveUniversal
	| SubKind
	| Role
	| Phase
	| Category
	| Mixin
	| RoleMixin
	| RelatorUniversal
	| BinaryMaterialRelation
	| BinaryFormalRelation
	| ModeUniversal
	| QualityUniversal
	| nAryMaterialRelation
	| nAryFormalRelation
;

EndurantUniversal returns EndurantUniversal:
	ModeUniversal
	| QualityUniversal
	| RelatorUniversal
	| Phase
	| Role
	| SubKind
	| Kind
	| CollectiveUniversal
	| QuantityUniversal
;

Universal returns Universal:
	Kind
	| QuantityUniversal
	| CollectiveUniversal
	| SubKind
	| Role
	| Phase
	| Category
	| Mixin
	| RoleMixin
	| RelatorUniversal
	| ModeUniversal
	| QualityUniversal
;

DataType returns DataType:
	PrimitiveDataType
	| ComplexDataType
	| Enumeration;


// Only to scope solving
IntrinsicMomentUniversal returns IntrinsicMomentUniversal:
	ModeUniversal
	| QualityUniversal
;

Package returns Package:
	{Package}
	'package' name=ID
	'{'
		elements+=PackageableElement+
	'}'
;


// complete generalizationSet gender specializes Person into Man, Woman
// => GeographicalSpace specializes SpatialThing
// => GeographicalSpace, FooBar specialize SpatialThing
// => GeographicalSpace specializationOf SpatialThing
// GeographicalSpace => SpatialThing
// GeographicalSpace, MultiDimensionalSpace => SpatialThing
GeneralizationSet :
	CompleteGeneralizationSet
	| AnonymousGeneralizationSet
;

CompleteGeneralizationSet returns GeneralizationSet:
	(isCovering?='complete')?
	'GeneralizationSet' name=ID
	'specializes' specializedUniversal=[Universal|ID]
	'into' specializingUniversals+=[Universal|ID] ( "," specializingUniversals+=[Universal|ID])* 
	';'
;

AnonymousGeneralizationSet returns GeneralizationSet:
	specializingUniversals+=[Universal|ID] (
		(( ',' specializingUniversals+=[Universal|ID])+ ('specialize' | '=>'))
		|
		('specializes' | '=>')
	)
	specializedUniversal=[Universal|ID]
	';'
;

SingleAnonymousGeneralizationSet returns GeneralizationSet:
	specializingUniversals+=[Universal|ID]
	('specializes' | '=>')
	specializedUniversal=[Universal|ID]
	';'
;

MultipleAnonymousGeneralizationSet returns GeneralizationSet:
	specializingUniversals+=[Universal|ID] ( "," specializingUniversals+=[Universal|ID])+
	('specialize' | '=>')
	specializedUniversal=[Universal|ID]
	';'
;

PrimitiveDataType returns PrimitiveDataType:
	'PrimitiveDataType' name=ID
	'(' _type=PrimitiveDataTypeType ')'
	';'
;

ComplexDataType returns ComplexDataType:
	'ComplexDataType' name=ID
	'{'
		attributes+=DataTypeAttribute ( ';' attributes+=DataTypeAttribute)* 
	'}'
;

Enumeration returns Enumeration:
	'enum' name=ID
	'{'
		enumerationLiterals+=EString ( ',' enumerationLiterals+=EString)* 
	'}';


MeronymicRelation:
	ComponentOfRelation
	| MembershipRelation
	| SubCollectionRelation
	| SubQuantityRelation
;

/*
 * Example
 * 
 * Foo [1..1] isComponentOf Bar [1..1]; 
 */
ComponentOfRelation returns ComponentOfRelation:
	(
		(partIsEssential?='essential')?
		(partIsInseparable?='inseparable')?
		(partIsShareable?='shareable')?
		(partIsImmutable?='immutable')?
	)
	'relation'
	part=[SubstantialUniversal]
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?	
	'isComponentOf'
	whole=[SubstantialUniversal]
	('[' targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

/*
 * Example
 * 
 * Foo [1..1] isMemberOf Bar [1..1]; 
 */
MembershipRelation returns MembershipRelation:
	(
		(partIsEssential?='essential')?
		(partIsInseparable?='inseparable')?
		(partIsShareable?='shareable')?
		(partIsImmutable?='immutable')?
	)
	'relation'
	part=[SubstantialUniversal]
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?	
	'isMemberOf'
	whole=[SubstantialUniversal]
	('[' targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

/*
 * Example
 * 
 * Foo [1..1] isSubcollectionOf Bar [1..1];
 * 
 * GUIZZARDI, pg. 351 
 */
SubCollectionRelation returns SubCollectionRelation:
	(
		(partIsEssential?='essential')?
		(partIsInseparable?='inseparable')?
		(partIsShareable?='shareable')?
		(partIsImmutable?='immutable')?
	)
	'relation'
	part=[SubstantialUniversal]
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?	
	'isSubCollectionOf'
	whole=[SubstantialUniversal]
	('[' targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

/*
 * Example
 * 
 * Foo [1..1] isComponentOf Bar [1..1];
 * 
 * GUIZZARDI, pg. 350 
 */
SubQuantityRelation returns SubQuantityRelation:
	(
		(partIsEssential?='essential')?
		(partIsInseparable?='inseparable')?
		// Is always false
		// partIsShareable?='shareable' & 
		(partIsImmutable?='immutable')?
	)
	'relation'
	part=[SubstantialUniversal]
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?	
	'isSubQuantityOf'
	whole=[SubstantialUniversal]
	('[' targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

/*
 * Example
 * 
 * Kind Foo {
 * 
 * }
 */
Kind returns Kind:
	{Kind}
	'Kind' name=ID
	'{'
		characterizedBy+=Characterization*
	'}'
;

QuantityUniversal returns QuantityUniversal:
	{QuantityUniversal}
	'Quantity' name=ID
	'{'
		characterizedBy+=Characterization*
	'}'
;

CollectiveUniversal returns CollectiveUniversal:
	isExtensional?='extensional'?
	'CollectiveUniversal' name=ID
	'{'
		characterizedBy+=Characterization*
	'}';

SubKind returns SubKind:
	{SubKind}
	'SubKind' name=ID
	'{'
		characterizedBy+=Characterization*
	'}';

/*
 * Example
 * 
 * 
 */
Role returns Role:
	'Role' name=ID
	'{'
		characterizedBy+=Characterization*
	'}'
;

/*
 * Example
 * 
 * 
 */
Phase returns Phase:
	{Phase}
	'Phase' name=ID
	'{'
		characterizedBy+=Characterization*
	'}'
;

/*
 * Example
 * 
 * 
 */
Category returns Category:
	{Category}
	'Category' name=ID
	'{'
	'}'
;

/*
 * Example
 * 
 * 
 */
Mixin returns Mixin:
	{Mixin}
	'Mixin' name=ID
	'{'
	'}'
;

/*
 * Example
 * 
 * 
 */
RoleMixin returns RoleMixin:
	'RoleMixin' name=ID
	'{'
	'}'
;

/*
 * Example
 * 
 * RelatorUniversal Registration {
 * 	mediates -> Offspring [1..1]
 * 	mediates -> Parent[1..]
 * }
 * 
 */
RelatorUniversal returns RelatorUniversal:
	'RelatorUniversal' name=ID
	'{'
		characterizedBy+=Characterization*
		mediations+=Mediation* 
	'}'
;

/*
 * Example
 * 
 * material rel Parent[1..2] parentOf OffSpring[1..*];
 */
BinaryMaterialRelation returns BinaryMaterialRelation:
	'material' 'rel'
	source=[ExternallyDependentUniversal]
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?
	name=ID
	('(' derivedFrom=[RelatorUniversal] ')')?
	target=[ExternallyDependentUniversal]
	('['targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

/*
 * Example
 * 
 * formal rel Parent[1..2] parentOf OffSpring[1..*];
 */
BinaryFormalRelation returns BinaryFormalRelation:
	'formal' 'rel'
	source=[Universal]
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?
	name=ID
	target=[Universal]
	('['targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

/*
 * Example
 * 
 * ModeUniversal Foo { };
 */
ModeUniversal returns ModeUniversal:
	'ModeUniversal' name=ID
	'{'
		characterizedBy+=Characterization*
	'}';

/*
 * Example
 * 
 * QualityUniversal Foo { };
 * 
 * Possible source of confusion:
 * It must have a characterization with target = self
 */
QualityUniversal returns QualityUniversal:
	'QualityUniversal' name=ID
	'characterizes' characterization = [Characterization]
	'{'
		//TODO: review this
		('datatypes' '(' datatypes+=[DataType] ( "," datatypes+=[DataType])* ')' )?
		characterizedBy+=Characterization*
	'}'
;

/*
 * Example
 * 
 * material assoc Teaching[1..2] happensAt Class[*], Teacher[1..*], Student[1..*];
 * 
 * Possible source of confusion:
 * It must have a characterization with target = self
 */

//QUESTION: Why does it have multiple source bounds it there is only 1 source (derivedFrom)
nAryMaterialRelation returns nAryMaterialRelation:
	'material' 'assoc'
	derivedFrom=[RelatorUniversal]
	name=ID
	(targetRelata+=[ExternallyDependentUniversal] ('['sourceLowerBound+=CardinalityBound '..' sourceUpperBound+=CardinalityUpperBound ']') ( ',' targetRelata+=[ExternallyDependentUniversal])* ('['sourceLowerBound+=CardinalityBound '..' sourceUpperBound+=CardinalityUpperBound ']'))?
	';'
;

//What is the source/target?
nAryFormalRelation returns nAryFormalRelation:
	'formal' 'assoc'
	name=ID
	(targetRelata+=[Universal] ('['sourceLowerBound+=CardinalityBound '..' sourceUpperBound+=CardinalityUpperBound ']') ( ',' targetRelata+=[Universal])* ('['sourceLowerBound+=CardinalityBound '..' sourceUpperBound+=CardinalityUpperBound ']'))?
	';'
;


/*
 * Example
 * 
 * Role Patient {
 * 	[1..1] characterizedBy Symptom [1..*]
 * }
 * 
 * Question: Why do an EndurantUniversal owns the Characterization?
 * This restricts the DSL. The Characterization can only be defined inside an EndurantUniversal definition.  
 */
Characterization returns Characterization:
	{Characterization}
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?
	'characterizedBy'
	target=[IntrinsicMomentUniversal]
	('[' targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

Characterizes returns Characterization:
	{Characterization}
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?
	'characterizedBy'
	target=[IntrinsicMomentUniversal]
	('[' targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;

/*
 * Example
 * 
 * RelatorUniversal Registration {
 * 	[1..1] mediates Offspring [1..1]
 * 	[1..1] mediates Parent [1..2]
 * }
 * 
 */
Mediation returns Mediation:
	{Mediation}
	'mediates'
	('['sourceLowerBound=CardinalityBound '..' sourceUpperBound=CardinalityUpperBound ']')?
	target=[ExternallyDependentUniversal]
	('[' targetLowerBound=CardinalityBound '..' targetUpperBound=CardinalityUpperBound ']')?
	';'
;


EString returns ecore::EString:
	STRING | ID;

/* TODO: implement this rule and an appropriate IValueConverter */
PrimitiveDataTypeType returns PrimitiveDataTypeType:
	'PrimitiveDataTypeType'
;

DataTypeAttribute returns DataTypeAttribute:
	isOfType=[DataType|ID] name=ID
;

EInt returns ecore::EInt:
	'-'? INT;

CardinalityUpperBound returns ecore::EInt:
	CardinalityBound | '*'
;

CardinalityBound returns ecore::EInt:
	INT
;