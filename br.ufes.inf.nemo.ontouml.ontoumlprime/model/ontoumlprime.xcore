@Ecore(
	nsPrefix="ontouml-prime", //Used for XMI serialization
	nsURI="http://nemo.inf.ufes.br/ontouml/ontoumlprime" //Used for o
)

@GenModel(
	testsDirectory="/br.ufes.inf.nemo.ontouml.ontoumlprime.tests/src-gen",
	editDirectory="/br.ufes.inf.nemo.ontouml.ontoumlprime.edit/src-gen",
	editorDirectory="/br.ufes.inf.nemo.ontouml.ontoumlprime.editor/src-gen",
	fileExtensions="pouml"
)

package br.ufes.inf.nemo.ontouml.PrimeOntoUML

/**
 * This file specifies the OntoUMLPrime metamodel.
 * 
 * The purpose of this is to reimplement a metamodel for OntoUML that is independent of the UML. 
 * The previous OntoUML metamodel implementation by Carraretto was based on the UML 2.0 implementation
 * in Eclipse. This means that it is too polluted with UML constraints. Strictly speaking this is not 
 * UML anymore (so OntoUMLPrime is strictly speaking a misnomer). 
 * 
 * We have used the Xcore syntax. If you want to export a genmodel and ecore model from it, this can be done by following the steps in:
 * http://wiki.eclipse.org/Xcore#Converting_an_Xcore_Model_to_a_GenModel
 * This is not necessary if you just want to create dynamic instances of the model, and if you want to generate code, as it is generated
 * automatically when you save the xcore file. However, this is necessary to use the OCL constraints in ontoumlprime.ocl, as that refers
 * to the ecore and not the xcore file, and also to use tools that depend on ecore (diagramming tool, xtext). 
 * 
 * If you create a genmodel/ecore, make sure you do not generate code from the genmodel. The code is already produced at src-gen
 * when the xcore file is saved.
 *  
 * History: 
 * created by João Paulo A. Almeida
 * 
 * 
*/



// @TODO: namespaces like in UML (with package imports)
// @TODO: support for comments

// @TODO:
// create a separate metamodel for "ocurrences" of the elements in views
// (similar to ocurrences and definitions in ARIS)
// keep this metamodel for definitions and create a metamodel for occurrences. 
// this will enable a strict separation between model and views

// FIXME change from default optional cardinalities to [1]

//annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCLEvaluator
//annotation "http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot" as OCLPivotEvaluator

@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")

class Model 
{
	contains unordered unique PackageableElement[*] elements
// 	if we were to add validation method directly in xcore, this is how it is done (but so far we are using
//  OCL instead
	//This is an easy way to make Xcore generate a Validator 
//	op boolean initializeValidator(org.eclipse.emf.ecore.EDiagnosticChain diagnostics, org.eclipse.emf.ecore.EMap<Object, Object> context)
//    {
//        return true
//    }	
}

abstract class Element {}
abstract class PackageableElement extends Element {}

abstract class NamedElement extends Element
{
	String name
}

class Package extends NamedElement, PackageableElement
{
	contains unordered unique PackageableElement[*] elements
}

// Class?

// @TODO: abstract class HigherOrderClass extends NamedElement, PackageableElement {}

abstract class Universal extends NamedElement, PackageableElement
{
	// boolean isAbstract // default false
	// isAbstract is unnecessary, as the type of Universal already defines whether a corresponding
	// uml class would be abstract
	
	// Boolean isDerived ?
	
	// @TODO: refers unordered unique HigherOrderClass[*] instanceOf
	
	refers transient unordered unique GeneralizationSet[*] isSpecializedVia opposite specializedUniversal	
	// @TODO: make this derived https://bugs.eclipse.org/bugs/show_bug.cgi?id=282486#c13
	// subclasses can be derived from isSpecializedVia

	refers transient unordered unique GeneralizationSet[*] specializesVia opposite specializingUniversals 
	// @TODO: make this derived https://bugs.eclipse.org/bugs/show_bug.cgi?id=282486#c13
	// superclasses can be derived from specializesVia	
}

class GeneralizationSet extends NamedElement, PackageableElement
{
	boolean isCovering // default is false in UML, however, for OntoUML, ideally, the default would 
					// depend on the classes involved, and there are constraints

	// boolean isDisjoint // default true
	// isDijoint has been removed, use different GeneralizationSets if necessary to represent disjointNess

	refers local Universal[1] specializedUniversal opposite isSpecializedVia

	// here we diverge from UML, which refers to Generalizations from a GeneralizationSet
	refers local unordered unique Universal[1..*] specializingUniversals opposite specializesVia

	// @TODO: add constraints for universals of the same metaclass
	// @TODO: refers HigherOrderUniversal[0..1] powertype
}
// differentiate dynamic and static classification?
// or is this only in the semantics, given by the patterns of metaclasses involved? 

abstract class DataType extends NamedElement, PackageableElement
{
}
class PrimitiveDataType extends DataType
{
	PrimitiveDataTypeType[1] _type
}
enum PrimitiveDataTypeType
{
	// this is a direct way to implement built-in types, differently from UML
	// in which this should be a library of built-ins at model level
	Boolean, String, Real, UnlimitedNatural
}
abstract class UserDefinedDataType extends DataType, NamedElement
{
}
class ComplexDataType extends UserDefinedDataType
{
	contains unordered unique DataTypeAttribute[2..*] attributes opposite complexDataType
}
class DataTypeAttribute extends NamedElement
{
	refers DataType[1] isOfType
	container ComplexDataType[1] complexDataType opposite attributes
	// @TODO: make this derived https://bugs.eclipse.org/bugs/show_bug.cgi?id=282486#c13  ???
	
}
class Enumeration extends UserDefinedDataType
{
	String[2..*] enumerationLiterals	
}


////////////////////// whole-part relations

/// this part on whole-part relations should be redesigned, considering that it is too permissive

// have a general meronymic relation and leave all the details to the constraints?
// enforce also some constraints in the concrete syntax for example, since subQuantityOf is never
// shareable, partIsShareable should not even apply to it

abstract class MeronymicRelation extends PackageableElement, BinaryDirectedRelationship
{
	refers SubstantialUniversal[1] whole // SOURCE
	refers SubstantialUniversal[1] part  // TARGET

	// FIXME this is too permissive
	boolean[1] partIsEssential	// default false
	boolean[1] partIsInseparable	// default false 
	boolean[1] partIsShareable	// default true
	boolean[1] partIsImmutable	// default false

	//derived boolean partIsMandatory get { targetLowerBound>=1 }
}

class ComponentOfRelation extends MeronymicRelation {}

class MembershipRelation extends MeronymicRelation {}

class SubCollectionRelation extends MeronymicRelation {}

class SubQuantityRelation extends MeronymicRelation {}

// @TODO (scope of transitity?)


/////////////

abstract class EndurantUniversal extends Universal {
	 // TODO: all universals but Roles and Rolemixins ????????
	 // the current metamodel allows Roles and Rolemixins to be characterizedBy 
	 // this seems to be a problem, because it is the relator that should appear with the properties of the relata
	contains unordered unique Characterization[*] characterizedBy opposite source	

}

// QUESTION: Why isn't it an Universal?
abstract class ExternallyDependentUniversal extends NamedElement, PackageableElement {
	// QUESTION: Why is it required?
	refers Mediation[1] mediation opposite target

	// should be derived https://bugs.eclipse.org/bugs/show_bug.cgi?id=282486#c13 instead 
	// An opposite reference within the same resource can be modeled through a read-only derived property which traverses the model and looks for the incoming reference.
	// A cross-resource, bidirectional reference has to be explicit (i.e. non transitive) on both sides.

	// I've detected this because
	// the xtext editor that implements this forces us to specify this manually the opposite relation
	// but mediations are not named. Making this derived should solve this.. but have to check later in Xtext
}

// SubstantialUniversals
abstract class SubstantialUniversal extends EndurantUniversal {}
abstract class SortalUniversal extends SubstantialUniversal {}
abstract class RigidSortalUniversal extends SortalUniversal {}
abstract class AntiRigidSortalUniversal extends SortalUniversal {}
abstract class SubstanceSortalUniversal extends RigidSortalUniversal {}

class Kind extends SubstanceSortalUniversal {}
class QuantityUniversal extends SubstanceSortalUniversal {}
class CollectiveUniversal extends SubstanceSortalUniversal {
		boolean[1] isExtensional
}
class SubKind extends RigidSortalUniversal {}

class Role extends AntiRigidSortalUniversal, ExternallyDependentUniversal {}
class Phase extends AntiRigidSortalUniversal {}

abstract class MixinUniversal extends Universal {}
abstract class RigidMixinUniversal extends MixinUniversal {}
class Category extends RigidMixinUniversal  {}
abstract class NonRigidMixinUniversal extends MixinUniversal {}

abstract class SemiRigidMixinUniversal extends NonRigidMixinUniversal {}
class Mixin extends SemiRigidMixinUniversal {}
abstract class AntiRigidMixinUniversal extends NonRigidMixinUniversal {}

class RoleMixin extends AntiRigidMixinUniversal, ExternallyDependentUniversal {}

// Moment Universals
abstract class MomentUniversal extends EndurantUniversal {}

class RelatorUniversal extends MomentUniversal
{
	contains unordered Mediation[2..*] mediations opposite source	
	// @TODO add constraint: may only specialize other RelatorUniversals
	
	//Roberto: soma das cardinalidades mínimas tem que ser 2 (não o número de mediations)
	//JP: pq não 2 mediations para a mesma class no caso de relações simétricas?
}

abstract class BinaryDirectedRelationship
{
	String sourceEndName
	int[1] sourceLowerBound
	int[1] sourceUpperBound

	String targetEndName
	int[1] targetLowerBound
	int[1] targetUpperBound

	// source and target are specified in specializations of this class
	// by doing this, the typing contraints can be directly specified in the metamodel (in metaclasses
	// that specialize this abstract metaclass), making some constraints unnecessary
	
	// TODO check how this is implemented in ref ontouml metamodel
	
	// JP: I assume there is no reason to distinguish ordered and non-ordered, as all should be non-ordered
	// JP: I assume all are unique as well (mapping to sets and not bags)
}	



class BinaryMaterialRelation extends BinaryDirectedRelationship, NamedElement, PackageableElement
{
	refers RelatorUniversal[1] derivedFrom
	refers ExternallyDependentUniversal[1] source
	refers ExternallyDependentUniversal[1] target 

	// TODO: cardinality constraints are derived
	// TODO: typing constraints for source and target based on the relation universal

	// should also be a set, even if there are two relators relating the same entities, there
	// should not be two material relations between the same entities... the tuples are identical
	// e.g., you should not say that there are two "student at" relations between "Student" and
	// "University" even if there are two "Enrollments".
}


class BinaryFormalRelation extends BinaryDirectedRelationship, NamedElement, PackageableElement
{
	refers Universal[1] source 
	refers Universal[1] target  
}

class Mediation extends BinaryDirectedRelationship
{
	// source -> relator
	container RelatorUniversal[1] source opposite mediations

	//target -> mediated
	refers ExternallyDependentUniversal[1] target opposite mediation

	// check source and target direction for correspondence to Roberto's metamodel to facilitate 
	// transformations
}

class Characterization extends BinaryDirectedRelationship
{
	container EndurantUniversal[1] source opposite characterizedBy 
	refers IntrinsicMomentUniversal[1] target opposite characterization

//	TODO contraints int sourceLowerBound must be one
//	TODO constraints int sourceUpperBound must be one	
}

// QUESTION: Why is Derivation missing?
// Is it because it should be implicit and automatically created for every (MaterialAssiciation, RelatorUniversal) pair?

abstract class IntrinsicMomentUniversal extends MomentUniversal {
	// QUESTION: This cardinality is conflicting with the constraint "A Mode must be connected (directly or indirectly) to a Characterization", isn't it?
	refers Characterization[1] characterization opposite target
	// should be derived https://bugs.eclipse.org/bugs/show_bug.cgi?id=282486#c13 instead 
}

class ModeUniversal extends IntrinsicMomentUniversal { }

class QualityUniversal extends IntrinsicMomentUniversal 
{
	refers unordered unique DataType[*] datatypes
}


///////////////////////////////////////////////////////////////////////////////
/// some advance stuff being considered, really work in progress

//QUESTION: Why does it have multiple source bounds if there is only 1 source (derivedFrom)
class nAryMaterialRelation extends NamedElement, PackageableElement
{
	refers RelatorUniversal[1] derivedFrom

	// fixme: should be at least 3
	refers ExternallyDependentUniversal[*] targetRelata   // ordered relata
	String[*] targetEndNames

//	int[*] targetLowerBound		// always 1
//	int[*] targetUpperBound 	// always 1
	int[*] sourceLowerBound
	int[*] sourceUpperBound	 	

	// cardinality constraints are  derived
	// typing constraints for source and target based on the relation universal
}



class nAryFormalRelation extends NamedElement, PackageableElement
{
	// fixme: should be at least 3
	refers Universal[*] targetRelata   // ordered relata
	String[*] targetEndNames
//	int[*] targetLowerBound		// always 1
//	int[*] targetUpperBound 	// always 1
	int[*] sourceLowerBound
	int[*] sourceUpperBound	 	
}



